name: Check for CDK API Updates

on:
  schedule:
    - cron: "0 * * * *" # Run every hour at minute 0

jobs:
  check-updates:
    runs-on: ubuntu-latest
    steps:
      - name: Checkout repository
        uses: actions/checkout@v4

      - name: Set up Python
        uses: actions/setup-python@v5
        with:
          python-version: "3.13"
          cache: "pip"

      - name: Install dependencies
        run: |
          python -m pip install --upgrade pip
          pip install hatch

      - name: Check for updates
        id: check
        run: |
          hatch run dev:check-updates
          exit_code=$?
          echo "exit_code=$exit_code" >> $GITHUB_OUTPUT
        continue-on-error: true

  # NOTE: Release steps must be defined static instead of re-usable workflow
  #       because of restriction of gh-action-pypi-publish.
  #       To update below release steps, update all workflows also.
  # See: https://github.com/pypa/gh-action-pypi-publish
  release:
    runs-on: ubuntu-latest
    needs: check-updates
    if: ${{ needs.check-updates.outputs.exit_code == '0' }}
    permissions:
      id-token: write # IMPORTANT: this permission is mandatory for trusted publishing
      contents: write # For git push
    steps:
      - name: Checkout repository
        uses: actions/checkout@v4
        with:
          fetch-depth: 0

      - name: Set up Python
        uses: actions/setup-python@v5
        with:
          python-version: "3.13"
          cache: "pip"

      - name: Install dependencies
        run: |
          python -m pip install --upgrade pip
          pip install hatch

      - name: Download CDK API
        run: hatch run dev:download

      - name: Run tests
        run: hatch test

      - name: Bump version
        run: hatch version minor

      - name: Build package
        run: hatch build

      - name: Get package version
        id: get_version
        run: echo "version=$(python -c "from cdk_api_mcp_server.__about__ import __version__; print(__version__)")" >> $GITHUB_OUTPUT

      - name: Commit and push changes
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
        run: |
          git config --local user.email "github-actions[bot]@users.noreply.github.com"
          git config --local user.name "github-actions[bot]"

          # バージョン情報とバッジ情報を同時に収集
          VERSION_INFO=""
          SEPARATOR=""
          BADGES=""
          for file in current-versions/*.txt; do
            # ファイル名から.txtを除いた名前を取得
            LIB_NAME=$(basename "$file" .txt)
            # JSONファイルからバージョンを抽出
            VERSION=$(cat "$file" | jq -r '.version')

            # バージョン情報を追加（リリースノート用、カンマ区切り）
            VERSION_INFO="${VERSION_INFO}${SEPARATOR}${LIB_NAME} v${VERSION}"
            SEPARATOR=", "

            # バッジを生成（README用）
            BADGE="[![${LIB_NAME}](https://img.shields.io/badge/${LIB_NAME/-/%20}-${VERSION}-blue.svg)](https://github.com/konokenj/cdk-api-mcp-server/blob/main/current-versions/${LIB_NAME}.txt)"
            BADGES="${BADGES}${BADGE}\n"
          done

          # READMEを更新
          sed -i "s|<!-- DEP-VERSIONS-START -->.*<!-- DEP-VERSIONS-END -->|<!-- DEP-VERSIONS-START -->\n${BADGES}<!-- DEP-VERSIONS-END -->|" README.md

          git add .
          git commit -m "Bump version to ${{ steps.get_version.outputs.version }}"

          # タグをメッセージ付きで作成（カンマ区切り1行）
          git tag -m "Included libraries: ${VERSION_INFO}" v${{ steps.get_version.outputs.version }}

          git push
          git push --tags

      - name: Publish to PyPI
        uses: pypa/gh-action-pypi-publish@release/v1
